# TODO Better performances to find with the --jobs pg argument to try out following the runner characteristics
# https://www.postgresql.org/docs/current/app-pgrestore.html --jobs=number-of-jobs
name: zReusable Scalingo Postgresql Clone database from postgreurl
# Clone a database from its fully qualified url

on:
  workflow_call:
    inputs:
      application-name:
        required: true
        type: string

    secrets:
      SCALINGO_API_TOKEN:
        required: true
      REMOTE_DATABASE_URL:
        required: true

jobs:
  # Doing it in two steps helped mitigate errors resulting from some extentions (for example postgis)
  # that sometimes do not dump restore schema and data in a working fashion resulting in TOC error
  clone-remote-db:
    name: Dump and restore the production database to the feature app
    runs-on: ubuntu-latest
    container:
      image: rcambonie/scalingo-cli

    steps:
      - name: Login with api-token
        run: scalingo login --api-token=${{ secrets.SCALINGO_API_TOKEN }}

      - name: Dump and restore the remote database schema then data.
        if: inputs.direct_database_url
        run:
          scalingo --app ${{ inputs.application-name }} run bash -c "dbclient-fetcher psql && ls && \
          pg_dump --schema-only --clean --if-exists --format c --no-owner --no-privileges --no-comments --exclude-schema 'information_schema' --exclude-schema '^pg_*' --dbname ${{ secrets.REMOTE_DATABASE_URL }} --file dump-schema.pgsql && ls && \
          pg_restore --clean --if-exists --no-owner --no-privileges --no-comments --dbname $DATABASE_URL dump-schema.pgsql && ls && \
          echo 'Schema Restoration complete'"

      - name: Dump and restore the remote database data.
        if: inputs.direct_database_url
        run:
          scalingo --app ${{ inputs.application-name }} run bash -c "dbclient-fetcher psql && ls && \
          pg_dump --data-only --format c --no-owner --no-privileges --no-comments --exclude-schema 'information_schema' --exclude-schema '^pg_*' --dbname ${{ secrets.REMOTE_DATABASE_URL }} --file dump-data.pgsql && ls && \
          pg_restore --data-only --no-owner --no-privileges --no-comments --dbname $DATABASE_URL dump-data.pgsql && ls && \
          echo 'Restore data complete'"
